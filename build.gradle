buildscript {
    repositories {
        maven { url = 'https://maven.galacticraft.net/repository/gradle/' }
        maven { url = 'https://files.minecraftforge.net' }
        maven { url = 'https://maven.minecraftforge.net' }
        maven { url = 'https://repo.spongepowered.org/maven' }
        maven { url = 'https://dvs1.progwml6.com/files/maven/' }
        maven { url = 'https://modmaven.dev' }
        mavenCentral()
        mavenLocal()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
    }
}
apply plugin: 'net.minecraftforge.gradle'
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
apply plugin: 'eclipse'
apply plugin: 'maven-publish'

java.toolchain.languageVersion = JavaLanguageVersion.of(8)

version = ttsVersion
group = ttsGroup
archivesBaseName = ttsBaseName

minecraft {
    // Simply re-run your setup task after changing the mappings to update your workspace.
    mappings channel: 'stable', version: '39-1.12'
    runs {
        client {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            mods {
                tothestars {
                    source sourceSets.main
                    source sourceSets.test
                }
            }
        }

        server {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            jvmArgs '-agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=5005'
            mods {
                tothestars {
                    source sourceSets.main
                    source sourceSets.test
                }
            }
        }

        debugClient {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            jvmArgs '-agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=5005'
            mods {
                tothestars {
                    source sourceSets.main
                    source sourceSets.test
                }
            }
        }

        debugServer {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            jvmArgs '-agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=5005'
            mods {
                tothestars {
                    source sourceSets.main
                    source sourceSets.test
                }
            }
        }
    }
}

repositories {
    maven { url = 'https://maven.galacticraft.net/repository/gradle/' }
    maven { url = 'https://maven.galacticraft.net/repository/legacy/' }
    maven { url = 'https://files.minecraftforge.net' }
    maven { url = 'https://maven.minecraftforge.net' }
    maven { url = 'https://repo.spongepowered.org/maven' }
    maven { url = 'https://dvs1.progwml6.com/files/maven/' }
    maven { url = 'https://modmaven.dev' }
    maven { url "https://maven.cleanroommc.com" }
    mavenCentral()
    mavenLocal()
}

dependencies {
    minecraft "net.minecraftforge:forge:1.12.2-14.23.5.2860"

    implementation fg.deobf("zone.rong:mixinbooter:7.1")

    implementation fg.deobf('dev.galacticraft:galacticraft-legacy:4.0.5')
    runtimeOnly fg.deobf('mezz.jei:jei_1.12.2:4.16.1.301')
}

configurations {
    compileOnly.extendsFrom compileRequire
}

jar {
    manifest {
        attributes "FMLCorePlugin": "io.github.codetoil.tothestars.asm.TTSCoremod"
        attributes "FMLCorePluginContainsFMLMod": true
    }
}

publishing {
    repositories {
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/Codetoil/ToTheStars")
            credentials {
                username = project.findProperty("gpr.user") ?: System.getenv("USERNAME")
                password = project.findProperty("gpr.key") ?: System.getenv("TOKEN")
            }
        }
    }
    publications {
        gpr(MavenPublication) {
            from(components.java)
        }
    }
}

clean {
    def filteredDelete = new HashSet<>()
    for (def toDelete : getDelete()) {
        for (def f : file(toDelete).listFiles()) {
            if (f.getName() != "fg_cache") {
                filteredDelete.add(f)
            }
        }
    }
    setDelete(filteredDelete)
}
